{
  "hash": "476c8b75abd34e7342b0dde36e1a3c73",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Stop repeating yourself when coding!\"\ndescription: \"When we repeat ourselves when programming, it is usually a sign that something is happening inefficiently.\"\nauthor:\n  - name: Bruno Montezano\n    url: https://brunomontezano.github.io/\n    orcid: 0000-0002-4627-1776\n    affiliation: Federal University of Rio Grande do Sul & Hospital de Clínicas de Porto Alegre\n    affiliation-url: https://www.ufrgs.br/\ndate: 02-19-2024\ncategories: [R, Programming]\ncitation: \n  url: https://brunomontezano.github.io/posts/2024-02-19-stop-repeating-yourself/ \nimage: preview-image.jpg\ndraft: false\n---\n\n\nIn general, when we are programming, whether using R or any other programming language, when we notice that we start repeating ourselves over and over again, that is not a good sign. Not because our code will break or not do what we would like it to do, but it becomes less flexible, less adaptable and less scalable. In this blog post, I will try to give some possible solutions when we come across unnecessary repetitions in our code.\n\n# What is the problem?\n\nLet's suppose I have a data set with 10 rows (research participants) and seven\ncolumns (participant ID, age, and five items from an assessment instrument that\nI applied to each of those assessed). At the end of data collection, I realized\nthat the items had been coded incorrectly, the levels were recorded from 1 to 5,\nbut the instrument, to be corrected appropriately, must be coded from 0 to 4.\nFurthermore, the items 4 and 5 must be reverse coded, as they are in the\nopposite direction of the construct evaluated in relation to the other items on\nthe scale.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ntibble::tibble(\n  id = 1:10,\n  age = round(rnorm(n = 10, mean = 35, sd = 10)),\n  item_1 = sample(1:5, 10, replace = TRUE),\n  item_2 = sample(1:5, 10, replace = TRUE),\n  item_3 = sample(1:5, 10, replace = TRUE),\n  item_4 = sample(1:5, 10, replace = TRUE),\n  item_5 = sample(1:5, 10, replace = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n      id   age item_1 item_2 item_3 item_4 item_5\n   <int> <dbl>  <int>  <int>  <int>  <int>  <int>\n 1     1    29      1      4      4      2      1\n 2     2    37      5      1      1      1      4\n 3     3    27      5      4      1      3      5\n 4     4    51      1      3      4      3      5\n 5     5    38      1      2      1      4      4\n 6     6    27      5      2      2      3      5\n 7     7    40      5      4      3      1      4\n 8     8    42      2      4      2      4      4\n 9     9    41      2      4      2      5      1\n10    10    32      1      2      5      1      5\n```\n\n\n:::\n:::\n\n\n# Create your own functions\n\n\n\n\n::: {.cell}\n\n:::\n\n\n# Use `purrr::map` in your favor\n\n# When changing columns with `dplyr::mutate`, remember `dplyr::across`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}